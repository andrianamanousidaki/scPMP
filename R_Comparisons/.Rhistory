knitr::opts_chunk$set(echo = TRUE)
library(RANN)
library(ClusterR)
library(plyr)
library(cluster)
library(mclust)
library(igraph)
library(RANN)
library(Matrix)
library(expm)
library(cccd)
library(pracma)
sim_data <- read.csv(file = '../Data_after_Imputation/beta_3_4_10_filtered_saver.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/beta_cell_groups_3_4_10_after_filtering.csv')
true_labels <- true_labels[, -c(1, 2)]
rownames(sim_data) = sim_data[, 1]
sim_data <- sim_data[,-1]
true_labels <- true_labels[, -1]
source('../R_functions/processing_prior_pm_clustering.R')
source('../R_functions/Path_Metrics_Clustering_R.R')
#Lognormalization
X = t(sim_data)
X = diag(1/apply(X, 1, sum))%*%X*10000
X = log(X+1)
# Elinmination of genes
NumberOfGenes = 2000
gene_var <- apply(X, 2, function(x) var(x))
sorted_var = sort(gene_var, decreasing = TRUE)
cutoff = sorted_var[NumberOfGenes+1]
high_var_genes = which(gene_var>cutoff)
X_2000 = X[, high_var_genes]
gene_var_2000 <- apply(X_2000, 2, function(x) var(x))
set.seed(1)
s1 <- proc.time()
sim_data <- processing_prior_pm_clustering(dataset = sim_data,
LogNormalization = TRUE,
var_cutoff = 0.4,
EliminateGenes = TRUE,
NumberOfGenes = 2000,
LocalAvgAllPts = TRUE,
LocalAvgNbhdSize = 12)
s2 <- proc.time()
pm_output <- Path_Metrics_Clustering_R(dataset = sim_data,
n_clust = 3, # desired number of clusters
p = 4, # metric parameter
silhouette = FALSE, #prediction of clusters
SpectralOpts.LearnMDSEmbeddingDimension = TRUE,
Fast_mds = FALSE)
end<-proc.time()
library(ggplot2)
library(patchwork)
cbfly <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
pmdata <- as.data.frame(t(pm_output$U1[1:2,]))
pmdata$true_labels <- as.factor(true_labels)
pmdata$predicted <- as.factor(pm_output$pm_labels)
p1 <- ggplot(pmdata, aes(x=V1, y=V2)) + geom_point(aes(color = true_labels))
p1 <- p1 + labs(x ='PM1', y='PM2')+ theme(legend.position = c(0.87, 0.17),
aspect.ratio=1,
legend.key.size = unit(0.5, 'cm'))
p1 <- p1 + scale_colour_manual(values = cbfly)
p2 <- ggplot(pmdata, aes(x=V1, y=V2)) + geom_point(aes(color = predicted))
p2 <- p2 + labs(x ='PM1', y='PM2')+ theme(legend.position = c(0.87, 0.17),
aspect.ratio=1,
legend.key.size = unit(0.5, 'cm'))
p2 <- p2 + scale_colour_manual(values = cbfly)
p1 + p2
source('../R_functions/clustering_evaluation.R')
accuracy<-clustering_evaluation(pm_output$pm_labels,t(true_labels))
accuracy
complete_rt=(end-s1)[3]/60
complete_rt
clustering_rt=(end-s2)[3]/60
clustering_rt
sim_data <- read.csv(file = '../Data_after_Imputation/beta_3_4_10_filtered_saver.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/beta_cell_groups_3_4_10_after_filtering.csv')
true_labels <- true_labels[, -c(1, 2)]
rownames(sim_data) = sim_data[, 1]
sim_data <- sim_data[,-1]
true_labels <- true_labels[, -1]
source('../R_functions/processing_prior_pm_clustering.R')
source('../R_functions/Path_Metrics_Clustering_R.R')
#Lognormalization
X = t(sim_data)
X = diag(1/apply(X, 1, sum))%*%X*10000
X = log(X+1)
# Elinmination of genes
NumberOfGenes = 2000
gene_var <- apply(X, 2, function(x) var(x))
sorted_var = sort(gene_var, decreasing = TRUE)
cutoff = sorted_var[NumberOfGenes+1]
high_var_genes = which(gene_var>cutoff)
X_2000 = X[, high_var_genes]
gene_var_2000 <- apply(X_2000, 2, function(x) var(x))
# Variance distribution
hist(gene_var_2000, main = "Histogram of gene expression variance", xlab = 'variance')
abline(v = 0.3, col = 'red')
set.seed(1)
s1 <- proc.time()
sim_data <- processing_prior_pm_clustering(dataset = sim_data,
LogNormalization = TRUE,
var_cutoff = 0.3,
EliminateGenes = TRUE,
NumberOfGenes = 2000,
LocalAvgAllPts = TRUE,
LocalAvgNbhdSize = 12)
s2 <- proc.time()
pm_output <- Path_Metrics_Clustering_R(dataset = sim_data,
n_clust = 3, # desired number of clusters
p = 4, # metric parameter
silhouette = FALSE, #prediction of clusters
SpectralOpts.LearnMDSEmbeddingDimension = TRUE,
Fast_mds = FALSE)
end<-proc.time()
library(ggplot2)
library(patchwork)
cbfly <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
pmdata <- as.data.frame(t(pm_output$U1[1:2,]))
pmdata$true_labels <- as.factor(true_labels)
pmdata$predicted <- as.factor(pm_output$pm_labels)
p1 <- ggplot(pmdata, aes(x=V1, y=V2)) + geom_point(aes(color = true_labels))
p1 <- p1 + labs(x ='PM1', y='PM2')+ theme(legend.position = c(0.87, 0.17),
aspect.ratio=1,
legend.key.size = unit(0.5, 'cm'))
p1 <- p1 + scale_colour_manual(values = cbfly)
p2 <- ggplot(pmdata, aes(x=V1, y=V2)) + geom_point(aes(color = predicted))
p2 <- p2 + labs(x ='PM1', y='PM2')+ theme(legend.position = c(0.87, 0.17),
aspect.ratio=1,
legend.key.size = unit(0.5, 'cm'))
p2 <- p2 + scale_colour_manual(values = cbfly)
p1 + p2
source('../R_functions/clustering_evaluation.R')
accuracy<-clustering_evaluation(pm_output$pm_labels,t(true_labels))
accuracy
complete_rt=(end-s1)[3]/60
complete_rt
clustering_rt=(end-s2)[3]/60
clustering_rt
source('../R_functions/clustering.R')
dataset=c('RNAMix1','RNAMix2','TMLung','Beta2','TMPanc','BaronPanc',
'PBMC4k','CellMixSng')
method=c('RaceID_clustering','SC3_clustering','Seurat_clustering_default_res_0.8',
'Seurat_Clustering_PM_processing','Seurat_def_clustering',
'SIMLR_clustering','Path_metrics_clustering','kmeans',
'dbscan',	'umap+dbscan',	'tsne+kmeans')
method<-method[6]
dataset=c('Beta2')
acc_res<-matrix(0,nrow=1,ncol=7)
colnames(acc_res)<-c( "ARI","ECP" , "ECA","complete_rt","clustering_rt", "method","dataset" )
for(d in dataset){
for(m in method){
print(d)
res<-clustering(dataset=d,method=m)
acc_res<-rbind(acc_res,res)
}
}
View(acc_res)
source('../R_functions/clustering.R')
source('../R_functions/processing_prior_pm_clustering.R')
source("../R_functions/clustering_evaluation.R")
# Beta2 -------------------------------------------------------------------
dataset ='Beta2'
mydata <- read.csv(file = '../Data_after_Imputation/beta_3_4_10_filtered_saver.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/beta_cell_groups_3_4_10_after_filtering.csv')
true_labels<-true_labels[,-c(1,2)]
var_cutoff=0.5
rownames(mydata) = mydata[,1]
mydata<-mydata[,-1]
true_labels<-true_labels[,-1]
set.seed(1)
s1<-proc.time()
mydata<-processing_prior_pm_clustering(dataset=mydata,LogNormalization=TRUE,var_cutoff=var_cutoff)
s2<-proc.time()
epsilon =2.6
db<-fpc::dbscan(data=t(mydata),eps=epsilon,MinPts = 10,method='raw')
db_labels<-db$cluster
out_points<-which(db_labels==0)
core_points<-which(db_labels!=0)
if(length(out_points>0)){
new_labels<-rep(0,times=length(db_labels))
new_labels[core_points]<-db_labels[core_points]
core_point_labels<-db_labels
knn=nn2(data= t(mydata[,core_points]),query=t(mydata[,out_points]), k = 1)
IDX=knn$nn.idx
for(i in 1:length(out_points)){
new_labels[out_points[i]]<-core_point_labels[IDX[i]]
}
db_labels<-new_labels}
end<-proc.time()
runtime<-list(complete_rt=(end-s1)[3]/60,clustering_rt=(end-s2)[3]/60)
eval<-clustering_evaluation(db_labels,t(true_labels))
eval= t(data.frame(unlist(eval)))
rownames(eval)<-dataset
eval<-cbind(eval,epsilon,length(unique(true_labels)))
eps_res<-rbind(eps_res,eval)
eps_res<-matrix(0,nrow=1,ncol=6)
eps_res<-rbind(eps_res,eval)
View(eps_res)
epsilon=2.42
var_cutoff=0.4
rownames(mydata) = mydata[,1]
mydata<-mydata[,-1]
true_labels<-true_labels[,-1]
set.seed(1)
dataset ='Beta2'
mydata <- read.csv(file = '../Data_after_Imputation/beta_3_4_10_filtered_saver.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/beta_cell_groups_3_4_10_after_filtering.csv')
true_labels<-true_labels[,-c(1,2)]
var_cutoff=0.5
epsilon =2.42
# epsilon_umap = 0.626
rownames(mydata) = mydata[,1]
mydata<-mydata[,-1]
true_labels<-true_labels[,-1]
set.seed(1)
s1<-proc.time()
mydata<-processing_prior_pm_clustering(dataset=mydata,LogNormalization=TRUE,var_cutoff=var_cutoff)
s2<-proc.time()
eps_res<-matrix(0,nrow=1,ncol=6)
for(epsilon in seq(from =2.4, to=2.65, by= 0.01 ) ){
db<-fpc::dbscan(data=t(mydata),eps=epsilon,MinPts = 10,method='raw')
db_labels<-db$cluster
out_points<-which(db_labels==0)
core_points<-which(db_labels!=0)
if(length(out_points>0)){
new_labels<-rep(0,times=length(db_labels))
new_labels[core_points]<-db_labels[core_points]
core_point_labels<-db_labels
knn=nn2(data= t(mydata[,core_points]),query=t(mydata[,out_points]), k = 1)
IDX=knn$nn.idx
for(i in 1:length(out_points)){
new_labels[out_points[i]]<-core_point_labels[IDX[i]]
}
db_labels<-new_labels}
end<-proc.time()
runtime<-list(complete_rt=(end-s1)[3]/60,clustering_rt=(end-s2)[3]/60)
eval<-clustering_evaluation(db_labels,t(true_labels))
eval= t(data.frame(unlist(eval)))
rownames(eval)<-dataset
eval<-cbind(eval,epsilon,length(unique(true_labels)))
eps_res<-rbind(eps_res,eval)
}
eps_res[which(eps_res[,4]==eps_res[,6] ),]
dataset ='Beta2'
mydata <- read.csv(file = '../Data_after_Imputation/beta_3_4_10_filtered_saver.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/beta_cell_groups_3_4_10_after_filtering.csv')
true_labels<-true_labels[,-c(1,2)]
var_cutoff=0.4
epsilon =2.42
# epsilon_umap = 0.626
rownames(mydata) = mydata[,1]
mydata<-mydata[,-1]
true_labels<-true_labels[,-1]
set.seed(1)
s1<-proc.time()
mydata<-processing_prior_pm_clustering(dataset=mydata,LogNormalization=TRUE,var_cutoff=var_cutoff)
s2<-proc.time()
eps_res<-matrix(0,nrow=1,ncol=6)
for(epsilon in seq(from =2.4, to=2.65, by= 0.01 ) ){
db<-fpc::dbscan(data=t(mydata),eps=epsilon,MinPts = 10,method='raw')
db_labels<-db$cluster
out_points<-which(db_labels==0)
core_points<-which(db_labels!=0)
if(length(out_points>0)){
new_labels<-rep(0,times=length(db_labels))
new_labels[core_points]<-db_labels[core_points]
core_point_labels<-db_labels
knn=nn2(data= t(mydata[,core_points]),query=t(mydata[,out_points]), k = 1)
IDX=knn$nn.idx
for(i in 1:length(out_points)){
new_labels[out_points[i]]<-core_point_labels[IDX[i]]
}
db_labels<-new_labels}
end<-proc.time()
runtime<-list(complete_rt=(end-s1)[3]/60,clustering_rt=(end-s2)[3]/60)
eval<-clustering_evaluation(db_labels,t(true_labels))
eval= t(data.frame(unlist(eval)))
rownames(eval)<-dataset
eval<-cbind(eval,epsilon,length(unique(true_labels)))
eps_res<-rbind(eps_res,eval)
}
eps_res[which(eps_res[,4]==eps_res[,6] ),]
source('../R_functions/clustering.R')
source('../R_functions/processing_prior_pm_clustering.R')
source("../R_functions/clustering_evaluation.R")
dataset ='PBMC4k'
set.seed(1)
mydata <- read.csv(file = 'Data_after_Imputation/subset_pbmc4k.csv')
dataset ='PBMC4k'
set.seed(1)
mydata <- read.csv(file = '../Data_after_Imputation/subset_pbmc4k.csv')
true_labels <- read.csv(file = '../Data_after_Imputation/subset_pbmc4k_labels.csv')
var_cutoff=2
rownames(mydata) = mydata[,1]
mydata<-mydata[,-1]
true_labels<-true_labels[,-1]
mydata<-processing_prior_pm_clustering(dataset=mydata,LogNormalization=TRUE,var_cutoff=var_cutoff)
eps_res<-matrix(0,nrow=1,ncol=6)
for(epsilon in seq(from =5, to=10, by= 1) ){
db<-fpc::dbscan(data=t(mydata),eps=epsilon,MinPts = 10)
db_labels<-db$cluster
out_points<-which(db_labels==0)
core_points<-which(db_labels!=0)
if(length(out_points>0)){
new_labels<-rep(0,times=length(db_labels))
new_labels[core_points]<-db_labels[core_points]
core_point_labels<-db_labels
knn=nn2(data= t(mydata[,core_points]),query=t(mydata[,out_points]), k = 1)
IDX=knn$nn.idx
for(i in 1:length(out_points)){
new_labels[out_points[i]]<-core_point_labels[IDX[i]]
}
db_labels<-new_labels}
eval<-clustering_evaluation(db_labels,t(true_labels))
eval= t(data.frame(unlist(eval)))
rownames(eval)<-dataset
eval<-cbind(eval,epsilon,length(unique(true_labels)))
eps_res<-rbind(eps_res,eval)
}
eps_res[which(eps_res[,4]==eps_res[,6] ),]
